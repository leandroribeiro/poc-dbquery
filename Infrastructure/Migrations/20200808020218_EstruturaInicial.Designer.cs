// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TarefaContext))]
    [Migration("20200808020218_EstruturaInicial")]
    partial class EstruturaInicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Tarefa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Concluida")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int?>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Tarefas","dbo");

                    b.HasData(
                        new { Id = 1, Concluida = true, Nome = "Fazer 1" },
                        new { Id = 2, Concluida = true, Nome = "Fazer 2" },
                        new { Id = 3, Concluida = true, Nome = "Fazer 3" },
                        new { Id = 4, Concluida = true, Nome = "Fazer 4" },
                        new { Id = 5, Concluida = true, Nome = "Fazer 5" },
                        new { Id = 6, Concluida = false, Nome = "Fazer 6" },
                        new { Id = 7, Concluida = false, Nome = "Fazer 7" },
                        new { Id = 8, Concluida = false, Nome = "Fazer 8" },
                        new { Id = 9, Concluida = false, Nome = "Fazer 9" },
                        new { Id = 10, Concluida = false, Nome = "Fazer 10" },
                        new { Id = 11, Concluida = false, Nome = "Fazer 11" },
                        new { Id = 12, Concluida = false, Nome = "Fazer 12" },
                        new { Id = 13, Concluida = false, Nome = "Fazer 13" },
                        new { Id = 14, Concluida = false, Nome = "Fazer 14" },
                        new { Id = 15, Concluida = false, Nome = "Fazer 15" },
                        new { Id = 16, Concluida = false, Nome = "Fazer 16" },
                        new { Id = 17, Concluida = false, Nome = "Fazer 17" },
                        new { Id = 18, Concluida = false, Nome = "Fazer 18" },
                        new { Id = 19, Concluida = false, Nome = "Fazer 19" },
                        new { Id = 20, Concluida = false, Nome = "Fazer 20" }
                    );
                });

            modelBuilder.Entity("Domain.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Usuarios","dbo");

                    b.HasData(
                        new { Id = 1, Nome = "Fulano" },
                        new { Id = 2, Nome = "Beltrano" },
                        new { Id = 3, Nome = "Ciclano" }
                    );
                });

            modelBuilder.Entity("Domain.Tarefa", b =>
                {
                    b.HasOne("Domain.Usuario", "Usuario")
                        .WithMany("Tarefas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
